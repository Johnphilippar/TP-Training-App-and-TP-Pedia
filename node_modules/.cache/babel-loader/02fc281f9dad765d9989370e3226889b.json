{"ast":null,"code":"var reactProperty = require('react-property');\n\nvar styleToJS = require('style-to-js').default;\n\nvar utilities = require('./utilities');\n\nvar htmlProperties = reactProperty.html;\nvar svgProperties = reactProperty.svg;\nvar isCustomAttribute = reactProperty.isCustomAttribute;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar styleToJSOptions = {\n  reactCompat: true\n};\n/**\n * Converts HTML/SVG DOM attributes to React props.\n *\n * @param  {Object} [attributes={}] - The HTML/SVG DOM attributes.\n * @return {Object}                 - The React props.\n */\n\nfunction attributesToProps(attributes) {\n  attributes = attributes || {};\n  var attributeName;\n  var attributeNameLowerCased;\n  var attributeValue;\n  var property;\n  var props = {};\n\n  for (attributeName in attributes) {\n    attributeValue = attributes[attributeName]; // ARIA (aria-*) or custom data (data-*) attribute\n\n    if (isCustomAttribute(attributeName)) {\n      props[attributeName] = attributeValue;\n      continue;\n    } // convert HTML attribute to React prop\n\n\n    attributeNameLowerCased = attributeName.toLowerCase();\n\n    if (hasOwnProperty.call(htmlProperties, attributeNameLowerCased)) {\n      property = htmlProperties[attributeNameLowerCased];\n      props[property.propertyName] = property.hasBooleanValue || property.hasOverloadedBooleanValue && !attributeValue ? true : attributeValue;\n      continue;\n    } // convert SVG attribute to React prop\n\n\n    if (hasOwnProperty.call(svgProperties, attributeName)) {\n      property = svgProperties[attributeName];\n      props[property.propertyName] = attributeValue;\n      continue;\n    } // preserve custom attribute if React >=16\n\n\n    if (utilities.PRESERVE_CUSTOM_ATTRIBUTES) {\n      props[attributeName] = attributeValue;\n    }\n  } // convert inline style to object\n\n\n  if (attributes.style != null) {\n    props.style = styleToJS(attributes.style, styleToJSOptions);\n  }\n\n  return props;\n}\n\nmodule.exports = attributesToProps;","map":{"version":3,"sources":["C:/Users/JPPAR/Desktop/React/teleperformance/tp-pedia/owl-trainings-schedule/node_modules/html-react-parser/lib/attributes-to-props.js"],"names":["reactProperty","require","styleToJS","default","utilities","htmlProperties","html","svgProperties","svg","isCustomAttribute","hasOwnProperty","Object","prototype","styleToJSOptions","reactCompat","attributesToProps","attributes","attributeName","attributeNameLowerCased","attributeValue","property","props","toLowerCase","call","propertyName","hasBooleanValue","hasOverloadedBooleanValue","PRESERVE_CUSTOM_ATTRIBUTES","style","module","exports"],"mappings":"AAAA,IAAIA,aAAa,GAAGC,OAAO,CAAC,gBAAD,CAA3B;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAP,CAAuBE,OAAvC;;AACA,IAAIC,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAII,cAAc,GAAGL,aAAa,CAACM,IAAnC;AACA,IAAIC,aAAa,GAAGP,aAAa,CAACQ,GAAlC;AACA,IAAIC,iBAAiB,GAAGT,aAAa,CAACS,iBAAtC;AAEA,IAAIC,cAAc,GAAGC,MAAM,CAACC,SAAP,CAAiBF,cAAtC;AAEA,IAAIG,gBAAgB,GAAG;AAAEC,EAAAA,WAAW,EAAE;AAAf,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,UAA3B,EAAuC;AACrCA,EAAAA,UAAU,GAAGA,UAAU,IAAI,EAA3B;AAEA,MAAIC,aAAJ;AACA,MAAIC,uBAAJ;AACA,MAAIC,cAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,KAAK,GAAG,EAAZ;;AAEA,OAAKJ,aAAL,IAAsBD,UAAtB,EAAkC;AAChCG,IAAAA,cAAc,GAAGH,UAAU,CAACC,aAAD,CAA3B,CADgC,CAGhC;;AACA,QAAIR,iBAAiB,CAACQ,aAAD,CAArB,EAAsC;AACpCI,MAAAA,KAAK,CAACJ,aAAD,CAAL,GAAuBE,cAAvB;AACA;AACD,KAP+B,CAShC;;;AACAD,IAAAA,uBAAuB,GAAGD,aAAa,CAACK,WAAd,EAA1B;;AACA,QAAIZ,cAAc,CAACa,IAAf,CAAoBlB,cAApB,EAAoCa,uBAApC,CAAJ,EAAkE;AAChEE,MAAAA,QAAQ,GAAGf,cAAc,CAACa,uBAAD,CAAzB;AACAG,MAAAA,KAAK,CAACD,QAAQ,CAACI,YAAV,CAAL,GACEJ,QAAQ,CAACK,eAAT,IACCL,QAAQ,CAACM,yBAAT,IAAsC,CAACP,cADxC,GAEI,IAFJ,GAGIA,cAJN;AAKA;AACD,KAnB+B,CAqBhC;;;AACA,QAAIT,cAAc,CAACa,IAAf,CAAoBhB,aAApB,EAAmCU,aAAnC,CAAJ,EAAuD;AACrDG,MAAAA,QAAQ,GAAGb,aAAa,CAACU,aAAD,CAAxB;AACAI,MAAAA,KAAK,CAACD,QAAQ,CAACI,YAAV,CAAL,GAA+BL,cAA/B;AACA;AACD,KA1B+B,CA4BhC;;;AACA,QAAIf,SAAS,CAACuB,0BAAd,EAA0C;AACxCN,MAAAA,KAAK,CAACJ,aAAD,CAAL,GAAuBE,cAAvB;AACD;AACF,GAzCoC,CA2CrC;;;AACA,MAAIH,UAAU,CAACY,KAAX,IAAoB,IAAxB,EAA8B;AAC5BP,IAAAA,KAAK,CAACO,KAAN,GAAc1B,SAAS,CAACc,UAAU,CAACY,KAAZ,EAAmBf,gBAAnB,CAAvB;AACD;;AAED,SAAOQ,KAAP;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiBf,iBAAjB","sourcesContent":["var reactProperty = require('react-property');\nvar styleToJS = require('style-to-js').default;\nvar utilities = require('./utilities');\n\nvar htmlProperties = reactProperty.html;\nvar svgProperties = reactProperty.svg;\nvar isCustomAttribute = reactProperty.isCustomAttribute;\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar styleToJSOptions = { reactCompat: true };\n\n/**\n * Converts HTML/SVG DOM attributes to React props.\n *\n * @param  {Object} [attributes={}] - The HTML/SVG DOM attributes.\n * @return {Object}                 - The React props.\n */\nfunction attributesToProps(attributes) {\n  attributes = attributes || {};\n\n  var attributeName;\n  var attributeNameLowerCased;\n  var attributeValue;\n  var property;\n  var props = {};\n\n  for (attributeName in attributes) {\n    attributeValue = attributes[attributeName];\n\n    // ARIA (aria-*) or custom data (data-*) attribute\n    if (isCustomAttribute(attributeName)) {\n      props[attributeName] = attributeValue;\n      continue;\n    }\n\n    // convert HTML attribute to React prop\n    attributeNameLowerCased = attributeName.toLowerCase();\n    if (hasOwnProperty.call(htmlProperties, attributeNameLowerCased)) {\n      property = htmlProperties[attributeNameLowerCased];\n      props[property.propertyName] =\n        property.hasBooleanValue ||\n        (property.hasOverloadedBooleanValue && !attributeValue)\n          ? true\n          : attributeValue;\n      continue;\n    }\n\n    // convert SVG attribute to React prop\n    if (hasOwnProperty.call(svgProperties, attributeName)) {\n      property = svgProperties[attributeName];\n      props[property.propertyName] = attributeValue;\n      continue;\n    }\n\n    // preserve custom attribute if React >=16\n    if (utilities.PRESERVE_CUSTOM_ATTRIBUTES) {\n      props[attributeName] = attributeValue;\n    }\n  }\n\n  // convert inline style to object\n  if (attributes.style != null) {\n    props.style = styleToJS(attributes.style, styleToJSOptions);\n  }\n\n  return props;\n}\n\nmodule.exports = attributesToProps;\n"]},"metadata":{},"sourceType":"script"}